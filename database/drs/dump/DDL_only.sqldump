-- MySQL dump 10.13  Distrib 5.7.21, for Win64 (x86_64)
--
-- Host: drsharvard.c5ewwyfxyijg.us-east-1.rds.amazonaws.com    Database: drs
-- ------------------------------------------------------
-- Server version	5.6.37-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`bdrc`@`%`*/ /*!50003 TRIGGER `drs`.`DRS_BEFORE_INSERT` BEFORE INSERT ON `DRS` FOR EACH ROW
BEGIN
	set NEW.volumeId = (select volumeId from Volumes where label = NEW.OSN);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`bdrc`@`%`*/ /*!50003 TRIGGER `drs`.`DRS_BEFORE_UPDATE` BEFORE UPDATE ON `DRS` FOR EACH ROW
BEGIN
	set NEW.volumeId = (select volumeId from Volumes where label = NEW.OSN);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Dumping routines for database 'drs'
--
/*!50003 DROP PROCEDURE IF EXISTS `AddDRS` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `AddDRS`(
  IngestDate datetime
  ,  objectid varchar(45) 
  , objectUrn varchar(72)
  , DRSdir varchar(45) 
  , filesCount int(11) 
  , size bigint(20)
  , OSN varchar(45)
  )
BEGIN
  
INSERT INTO `DRS`
(
`IngestDate`,
`objectid`,
`DRSdir`,
`objectUrn`,
`filesCount`,
`size`,
`OSN`)
VALUES
(
  IngestDate 
  ,  objectid 
  , DRSdir
  , objectUrn  
  , filesCount
  , size
  , OSN 
  )
  on duplicate key update
  `IngestDate` = IngestDate,
`objectid` = objectid,
`DRSdir`= DRSdir,
`objectUrn`= objectUrn,
`filesCount` = filesCount,
`size` = size,
`OSN` = OSN ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddOutline` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `AddOutline`(workName varchar(45))
    COMMENT 'Creates an outline row. Looks up the workName, adds it if not exists '
BEGIN



if not exists (select workId from Works w where w.workName = workName) then
BEGIN
	call AddWork(workName,NULL);
END;
END IF;

insert into Outlines(workId) values
((select workId from Works w where w.workName = workName)) 

on duplicate key update workId = workId ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddPrintMaster` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `AddPrintMaster`(workName varchar(45),pmPaths varchar(255))
BEGIN


if not exists (select workId from Works w where w.workName = workName) then
BEGIN
	insert into Works(workName) values(workName);
	insert into PrintMasters(workId,Path) values (last_insert_id(),pmPaths);
END;
else


insert into PrintMasters(workId,Path) values
((select workId from Works w where w.workName = workName), pmPaths) 
on duplicate key update workId = workId ;
END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddVolume` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `AddVolume`(workName varchar(45), srcLabel varchar(45))
BEGIN



if not exists (select workId from Works w where w.workName = workName) then
BEGIN
	insert into Works(workName) values(workName);
	insert into Volumes(workId, label) values (last_insert_id(),srcLabel);
END;
else


insert into Volumes(workId, label) values
((select workId from Works w where w.workName = workName), srcLabel) 

on duplicate key update workId = workId ;
END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddWork` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `AddWork`(pWorkName varchar(45), pHOLLIS varchar(45))
    COMMENT 'Creates a work, or updates its HOLLIS. Looks up the workName, adds it if not exists '
BEGIN

set @oHOLLIS = (select HOLLIS from Works w where pWorkName = w.WorkName) ;
set @NuHollis = COALESCE(pHOLLIS,@oHollis);
insert into drs.Works(WorkName,HOLLIS) values (pWorkName,trim(leading '0' from @NuHollis))  on duplicate key update HOLLIS = @NuHollis ; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CountWorksByChildren` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `CountWorksByChildren`()
BEGIN
set  @AllWorksCount = ( select count(*) from drs.Works);

set @WorksPrintOROutline = (select count(*) from drs.Works w left outer join drs.Outlines o using (workId) left outer join drs.PrintMasters p using (workId) where p.PrintMasterId is  not null or  o.outLineId is not null);

set @WorksNoOutlineNoPrint = (select count(*) from drs.Works w left outer join drs.Outlines o using (workId) left outer join drs.PrintMasters p using (workId) where p.PrintMasterId is  null and o.outLineId is null);

set @WorksNoOutline =  (select count(*) from drs.Works w left outer join drs.Outlines o using (workId) where o.outlineId is null);

set @WorksWithOutlineIJ=  (select count(*) from drs.Works w inner join drs.Outlines o using (workId));

set @WorksNoPrintLO =  (select count(*) from drs.Works w left outer join drs.PrintMasters p using (workId) where p.PrintMasterId is null);


set @WorksPrintIJ=  (select count(*) from drs.Works w inner join drs.PrintMasters p using (workId) );

set @WorksBothPrintOutlineIJ   =(select count(*) from drs.Works w inner join drs.Outlines o using (workId) inner join drs.PrintMasters p using (workId) );


SELECT 
    @AllWorksCount,
    @WorksPrintOROutline,
    @WorksNoOutlineNoPrint,
    @WorksNoOutline,
    @WorksWithOutlineIJ,
    @WorksNoPrintLO,
    @WorksPrintIJ,
    @WorksBothPrintOutlineIJ;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetReadyVolumes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `GetReadyVolumes`(fetchBatch int(11))
    COMMENT 'Return the Ready volumes.  Can return up to fetchBatch result sets. Marsk  volumes as queued'
BEGIN


declare done boolean default 0;
declare thisWork integer(11);

declare worksC cursor for 
select  workId from tWork;

declare continue handler for SQLSTATE '02000' set done=1;

-- find 'n' works which have at least 1 not queued
Create temporary table if not exists tWork as ( select distinct r.workId from ReadyWorksNotDeposited r
	inner join Volumes v on r.Volume = v.label
    where not v.Queued
    order by r.workId asc 
    limit fetchBatch);
    
-- Get the volumes for those works
Create temporary table if not exists tVol as ( select distinct v.volumeId from ReadyWorksNotDeposited r
	inner join Volumes v on r.Volume = v.label
    where not v.Queued
    and v.workId in (select t.workId from tWork t));

open worksC;

read_loop: LOOP
	fetch worksC into thisWork;
    if done = 1 then 
		leave read_loop;
	end if;
	select r.* from ReadyWorksNotDeposited r
	inner join Volumes v on r.Volume = v.label
    where not v.Queued and v.workId = thisWork
    order by r.workId asc ;
END LOOP;

close worksC;

update Volumes set Queued =  1 where volumeId in (select t.volumeId from tVol t);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetReadyVolumesByWorkId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `GetReadyVolumesByWorkId`(workIdParam int(11))
    COMMENT 'Return the Readyworks for the input workId. Mark the individual volumes for upload'
BEGIN


drop table if exists tVol;

Create temporary table if not exists tVol as (
select `Volume`,
       `WorkName`,
       `HOLLIS`,
       `OutlineOSN`,
       `PrintMasterOSN`
from ReadyWorksNotDeposited
join Volumes v using(workId)
where v.workId = workIdParam
and not v.Queued) ;

update Volumes set Queued = true where label in (select Volume from tVol);

select * from tVol;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PopulateWorkStatusCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `PopulateWorkStatusCount`()
BEGIN

declare done boolean default 0;
declare thisWork INTEGER(11);

declare  wc cursor  for 
select distinct workId from Works order by workId asc limit 6000,9000 ; 

declare continue handler for SQLSTATE '02000' set done=1;


open wc;

read_loop: LOOP
	fetch wc into thisWork;
    if done = 1 then 
		leave read_loop;
	end if;
	call UpdateWorkStatus(thisWork);
END LOOP;

close wc;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBatchBuild` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `UpdateBatchBuild`(
batchVolume varchar(45),batchBuildPath varchar(255), buildDate datetime, result varchar(45),
volFileCount INT,volFilesSize BIGINT)
BEGIN

-- must exist on call
select   buildPathId into @bp from BuildPaths where BuildPath = batchBuildPath ;
if @bp is null then
	select concat( 'BuildPath ', batchBuildPath, ' not found.') into @msg;
signal SQLSTATE '45000'
	set MESSAGE_TEXT = @msg ;
end if;

select volumeId into @volId from Volumes where label = batchVolume;
if @volId is null then
	select concat( 'Volume ', batchVolume, ' not found.') into @msg;
signal SQLSTATE '45000'
	set MESSAGE_TEXT = @msg ;
    
end if;
insert BatchBuilds
(
`BuildDate`
,`Result`
,`buildPathId`
)
VALUES
(
  buildDate
  , result
  , @bp
  )
  on duplicate key update
 `buildPathId`  =  @bp 
,`BuildDate` = buildDate
,`Result` = result
;

update Volumes set
	batchBuildId = (select batchBuildId from BatchBuilds where buildPathId = @bp),
    builtFileSize = volFilesSize,
    builtFileCount = volFileCount,
    Queued =  not isnull( buildDate)
where volumeId = @volId;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBatchBuildsFromProd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `UpdateBatchBuildsFromProd`(llim integer(11), ulim integer(11))
    COMMENT 'Hopelessly corrupt. new_table has so many duplicates, and this doesnht really do it.'
BEGIN

declare done boolean default 0;
declare prodLabel varchar(45);
declare prodPath  varchar(255);


-- drsqa.new_table has the volume label and the build path.
declare bb cursor for 
select label,path from `DRSQA`.new_table limit llim, ulim; -- test only where label = 'W00KG010083-I00KG010120';

declare continue handler for SQLSTATE '02000' set done=1;

-- Use a sample date for derive boundaries
set @prefix = '/Volumes/DRS_Staging/DRS/oldprod/';
set @prefixLen= length(@prefix);
set @dateRaw = '20180403';
set @datelen = length(@dateRaw);

open bb;

read_loop: LOOP
	fetch bb into prodLabel,prodPath;
    if done = 1 then 
		leave read_loop;
	end if;

    set @buildDate = STR_TO_DATE(mid(prodPath,@prefixlen+1,@datelen),'%Y%m%d');
    set @prodVolId = (select volumeId from Volumes where label = prodLabel);
   CALL `UpdateBatchBuild`(prodVolId, prodPath, @buildDate, 'success');
END LOOP;

close bb;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateWorkStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `UpdateWorkStatus`(workId INT(11))
BEGIN
INSERT INTO `drs`.`workStatusCount`
(
`workId`,
`Volumes`,
`NumberVolumesBatchQueued`,
`NumberVolumesBatchBuilt`,
`NumberVolumesUploadQueued`,
`NumberVolumesUploaded`,
`NumberVolumesDeposited`
)
VALUES
(
workId,

-- Volumes
(select count(1) from Volumes v where v.workId = workId),

-- `NumberVolumesBatchQueued
(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is null
    and bb.TransferQueuedDate is null
    and bb.TransferCompleteDate is null
    and d.DRSId is null)
,

-- `NumberVolumesBatchBuilt`
(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is not null
    and bb.TransferQueuedDate is null
    and bb.TransferCompleteDate is null
    and d.DRSId is null)
    ,
    
-- `NumberVolumesUploadQueued`,
    
(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is not null
    and bb.TransferQueuedDate is not null
    and bb.TransferCompleteDate is null
    and d.DRSId is null)
    ,


-- `NumberVolumesUploaded`,

(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is not null
    and bb.TransferQueuedDate is not null
    and bb.TransferCompleteDate is Not null
    and d.DRSId is null)
    ,
-- `NumberVolumesDeposited`    
(select count(1) from Works w
inner join Volumes v using (workId)
left join DRS using (volumeId)
where 
v.workId = workId
and drsId is not null
)

)
on DUPLICATE KEY 
UPDATE  
Volumes = (select count(1) from Volumes v where v.workId = workId),

`NumberVolumesBatchQueued` = (select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is null
    and bb.TransferQueuedDate is null
    and bb.TransferCompleteDate is null
    and d.DRSId is null)
,

`NumberVolumesBatchBuilt` = 
(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is not null
    and bb.TransferQueuedDate is null
    and bb.TransferCompleteDate is null
    and d.DRSId is null)
    ,
    
`NumberVolumesUploadQueued` =     
(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is not null
    and bb.TransferQueuedDate is not null
    and bb.TransferCompleteDate is null
    and d.DRSId is null)
    ,

`NumberVolumesUploaded` =
(select count(1) from BatchBuilds bb 
inner join Volumes v using(volumeId) 
inner join Works w using(workId) 
left join DRS d using(volumeId)
	where w.workId = workId
    and bb.QueuedDate is not null
    and bb.BuildDate is not null
    and bb.TransferQueuedDate is not null
    and bb.TransferCompleteDate is Not null
    and d.DRSId is null
    )
    ,
`NumberVolumesDeposited` =
(select count(1) from Works w
inner join Volumes v using (workId)
left join DRS using (volumeId)
where 
v.workId = workId
and drsId is not null
)
;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `WeeklyStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`bdrc`@`%` PROCEDURE `WeeklyStatus`()
BEGIN
set @objects = (SELECT count(1) FROM drs.DRS);
set @batches = (select count(distinct DRSDir) from drs.DRS);

set @partialUploads = (select count(*) 
from workStatusCount wsc
where wsc.Volumes <> wsc.NumberVolumesDeposited 
and wsc.Volumes > 0
and wsc.NumberVolumesDeposited > 0);


set @completeUploads = (select count(*) 
-- wsc.Volumes, wsc.NumberVolumesDeposited 
from workStatusCount wsc
where wsc.Volumes = wsc.NumberVolumesDeposited 
and wsc.Volumes > 0) ;

set @OldcompleteUploads = (


select count(distinct workName) 
  
  
from Works w
  
    left outer join drs.Outlines o using (workId) left outer join drs.PrintMasters p using (workId)
    inner join Volumes v using (workId)

    where w.HOLLIS is not null
          and p.PrintMasterId is  null
          and o.outLineId is  null
    and
    (select count(1) from Volumes v where v.workId = w.WorkId)
          
          =
     (select count(1) from Volumes v left join DRS d using (volumeId) where d.DRSid is not null and v.workId = w.workId)
 

and   (select count(1) from Volumes v left join DRS d using (volumeId) where d.DRSid is not null and v.workId = w.workId) <> 0
) ; 

set @OldpartialUploads = (
select count(distinct workName) 
  
  
from Works w
  
    left outer join drs.Outlines o using (workId) left outer join drs.PrintMasters p using (workId)
    inner join Volumes v using (workId)

    where w.HOLLIS is not null
          and p.PrintMasterId is  null
          and o.outLineId is  null
    and
    (select count(1) from Volumes v where v.workId = w.WorkId)
          
          <>
     (select count(1) from Volumes v left join DRS d using (volumeId) where d.DRSid is not null and v.workId = w.workId)
 

and   (select count(1) from Volumes v left join DRS d using (volumeId) where d.DRSid is not null and v.workId = w.workId) <> 0
) ; 


select @batches,@objects, @completeUploads,@partialUploads,   @OldcompleteUploads, @OldpartialUploads, sum(filesCount) as CumCount, sum(size) as CumSize from drs.DRS;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-07-30 11:44:52
